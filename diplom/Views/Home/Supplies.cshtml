@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model List<_Provider>
<link rel="stylesheet" href="~/css/Sup.css" />
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<body>
    <div class="search-container">
        <form method="get">
            <input type="text" name="searchQuery" placeholder="Искать в магазине" class="search-bar" />
        </form>
        <center>
        <button id="Supnew" type="button" class="button">
            <p>Добавить поставщика</p>
        </button>
        </center>
    </div>

    <div id="modal" class="modal">
        <div class="modal-content">
            <center>
            <div class="form-group">
                <p>Наименование поставщика</p>
                <textarea id="SupName" class="form-control"></textarea>
            </div>
            <div class="form-group">
                <p>Контактный телефон</p>
                <textarea id="SupPhone" class="form-control"></textarea>
            </div>
            <button id="Supnew2" type="button" class="button">
                <p>Добавить</p>
            </button>
            </center>
        </div>
    </div>

    <div class="packages-container">
        @foreach (var provider in Model)
        {
            <div class="package-item" data-provider-id="@provider.IdProvider">
                <div class="view-mode">
                    <p class="provider-name">Наименование: <span class="name-text">@provider.provider_name</span></p>
                    <p class="provider-phone">Контактный телефон: <span class="phone-text">@provider.provider_phone</span></p>
                    <button class="edit-provider-btn">Редактировать</button>
                    <button class="delete-user-btn" data-user-id="@provider.IdProvider">Удалить</button>
                </div>
                <div class="edit-mode" style="display:none;">
                    <label for="editProviderName">Наименование:</label>
                    <input type="text" class="editProviderName" value="@provider.provider_name" style="width: 300px; padding: 5px;">
                    <br>
                    <label for="editProviderPhone">Контактный телефон:</label>
                    <input type="text" class="editProviderPhone" value="@provider.provider_phone" style="width: 300px; padding: 5px;margin-top: 20px;">
                    <br>
                    <button class="save-edit-provider-btn" style="margin-top:14px!important">Сохранить</button>
                    <button class="cancel-edit-provider-btn" style="margin-top:14px!important">Отмена</button>
                </div>
            </div>
        }
    </div>
    <style>
        .view-mode,
        .edit-mode {
            text-align: center; /* Центрирование контента внутри .view-mode и .edit-mode */
            margin-top: 10px; /* Дополнительный верхний отступ между элементами */
        }

            .view-mode button,
            .edit-mode button {
                margin: 5px; /* Внутренние отступы между кнопками */
            }
    </style>
    <button onclick="window.location.href='AdminPage'" class="back-button">
        На главную
    </button>
    <script>
        // Находим элементы кнопки и модального окна
        var button = document.getElementById('Supnew');
        var modal = document.getElementById('modal');

        // Добавляем обработчик события клика на кнопку
        button.addEventListener('click', function () {
            // Показываем модальное окно
            modal.style.display = 'block';
        });

        // Добавляем обработчик события клика за пределами модального окна, чтобы закрыть его
        window.addEventListener('click', function (event) {
            if (event.target == modal) {
                modal.style.display = 'none';
            }
        });
    </script>

    <script>
        // Функция для отправки данных на сервер
        // Функция для отправки данных на сервер
        function addSupplier() {
            var supName = $('#SupName').val().trim();
            var supPhone = $('#SupPhone').val().trim();

            // Проверка наличия значений в обязательных полях
            if (!supName || !supPhone) {
                alert('Пожалуйста, заполните все обязательные поля');
                return;
            }

            // Проверка номера телефона - только цифры и не более 11 символов
            supPhone = supPhone.replace(/\D/g, ''); // Удаляем все не цифры
            supPhone = supPhone.slice(0, 11); // Ограничиваем до 11 символов

            // Проверка минимальной длины номера телефона
            if (supPhone.length !== 11) {
                alert('Номер телефона должен содержать ровно 11 цифр.');
                return;
            }

            // Проверка наименования - только буквы, пробелы и кавычки
            supName = supName.replace(/[^a-zA-Zа-яА-Я\s"']/g, ''); // Оставляем только буквы, пробелы и кавычки

            // Формирование данных для отправки на сервер
            var data = {
                SupName: supName,
                SupPhone: supPhone
            };

            // Отладочный вывод данных в консоль перед отправкой
            console.log('Отправляем на сервер следующие данные:', data);

            // Отправка данных на сервер с помощью AJAX запроса
            $.ajax({
                type: 'POST',
                url: '/Home/CreateSup', // Указываем URL вашего метода контроллера для обработки данных
                data: data, // Отправляем объект data напрямую, jQuery сам преобразует его в формат JSON
                success: function (response) {
                    console.log('Данные успешно отправлены');
                    closeModal(); // Закрыть модальное окно после успешной отправки данных
                },
                error: function (xhr, status, error) {
                    console.error('Ошибка при отправке данных:', error);
                    // Обработка ошибок
                    if (xhr.status === 500) {
                        var errorMessage = xhr.responseText;
                        alert('Ошибка при создании поставщика: ' + errorMessage);
                    } else {
                        alert('Произошла ошибка при отправке данных на сервер.');
                    }
                }
            });
        }

        // Функция для закрытия модального окна
        function closeModal() {
            $('#modal').hide();
        }

        // Добавление обработчика события клика на кнопку "Добавить"
        $(document).ready(function () {
            $('#Supnew2').click(function () {
                addSupplier(); // Вызываем функцию отправки данных при клике на кнопку
            });
        });

    </script>
    <script>
        $(document).ready(function () {
            $(".delete-user-btn").click(function () {
                var userId = $(this).data("user-id");

                // Отправляем AJAX-запрос на сервер для удаления пользователя
                $.ajax({
                    url: "/Home/DeleteSup",
                    type: "POST",
                    data: { userId: userId },
                    success: function (result) {
                        if (result.success) {
                            // Успешное удаление пользователя
                            console.log(result.message); // Лог для отладки
                            alert("Пользователь удален.") // Отобразить сообщение об успешном удалении
                        } else {
                            // Не удалось удалить пользователя из-за активных заказов
                            console.log(result.message); // Лог для отладки
                            alert(result.message); // Отобразить сообщение об ошибке
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Ошибка удаления пользователя:", error);
                        if (xhr.status === 500 && xhr.responseText) {
                            alert(xhr.responseText); // Отобразить текст ошибки 500
                        } else {
                            alert("Произошла ошибка при удалении пользователя."); // Отобразить общее сообщение об ошибке
                        }
                    }
                });
            });
        });
    </script>
    <script>
        $(document).ready(function () {
            // Переключение в режим редактирования
            $('.edit-provider-btn').click(function () {
                var packageItem = $(this).closest('.package-item');
                packageItem.find('.view-mode').hide();
                packageItem.find('.edit-mode').show();
            });

            // Отмена редактирования
            $('.cancel-edit-provider-btn').click(function () {
                var packageItem = $(this).closest('.package-item');
                packageItem.find('.edit-mode').hide();
                packageItem.find('.view-mode').show();
            });

            // Сохранение изменений
            $('.save-edit-provider-btn').click(function () {
                var packageItem = $(this).closest('.package-item');
                var providerId = packageItem.data('provider-id');
                var providerName = packageItem.find('.editProviderName').val().trim(); // Удаляем лишние пробелы
                var providerPhone = packageItem.find('.editProviderPhone').val().trim(); // Удаляем лишние пробелы

                // Проверка на пустоту полей
                if (providerName === '' || providerPhone === '') {
                    alert('Пожалуйста, заполните все поля.');
                    return;
                }

                // Проверка номера телефона - только цифры и не более 11 символов
                providerPhone = providerPhone.replace(/\D/g, ''); // Удаляем все не цифры
                providerPhone = providerPhone.slice(0, 11); // Ограничиваем до 11 символов

                // Проверка минимальной длины номера телефона
                if (providerPhone.length !== 11) {
                    alert('Номер телефона должен содержать ровно 11 цифр.');
                    return;
                }

                // Проверка наименования - только буквы, пробелы и кавычки
                providerName = providerName.replace(/[^a-zA-Zа-яА-Я\s"']/g, ''); // Оставляем только буквы, пробелы и кавычки

                var updatedProviderData = {
                    IdProvider: providerId,
                    provider_name: providerName,
                    provider_phone: providerPhone
                };

                $.ajax({
                    type: "POST",
                    url: "/Home/UpdateProvider",
                    data: updatedProviderData,
                    success: function (response) {
                        if (response.success) {
                            // Обновляем текст отображения
                            packageItem.find('.name-text').text(providerName);
                            packageItem.find('.phone-text').text(providerPhone);
                            packageItem.find('.edit-mode').hide();
                            packageItem.find('.view-mode').show();
                            alert('Данные провайдера успешно обновлены');
                        } else {
                            // Показываем сообщение об ошибке, полученное от сервера
                            alert(response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.log('Ошибка при обновлении провайдера:', error);
                    }
                });
            });

            // Ограничение на ввод только цифр и ограничение длины для номера телефона
            $('.editProviderPhone').on('input', function () {
                this.value = this.value.replace(/\D/g, ''); // Удаляем все не цифры
                this.value = this.value.slice(0, 11); // Ограничиваем до 11 символов
            });

            // Ограничение на ввод только букв, пробелов и кавычек для наименования
            $('.editProviderName').on('input', function () {
                this.value = this.value.replace(/[^a-zA-Zа-яА-Я\s"']/g, ''); // Оставляем только буквы, пробелы и кавычки
            });

        });

    </script>
    <script>
        $(document).ready(function () {
            $('#SupName').on('input', function () {
                var text = $(this).val();
                $(this).val(text.slice(0, 50)); // Ограничиваем до 50 символов
            });
        });
    </script>
    <script>
        // Оставляем только цифры в textarea
        $(document).ready(function () {
            $('#SupPhone').on('input', function () {
                var text = $(this).val();
                var filteredText = text.replace(/\D/g, ''); // Удаляем все не цифры
                $(this).val(filteredText.slice(0, 11)); // Ограничиваем до 11 символов
            });
        });

    </script>
</body>
